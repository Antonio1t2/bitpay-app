import {yupResolver} from '@hookform/resolvers/yup';
import {StackScreenProps} from '@react-navigation/stack';
import React, {useEffect, useState} from 'react';
import {Controller, useForm} from 'react-hook-form';
import * as yup from 'yup';
import Button, {ButtonState} from '../../../components/button/Button';
import BoxInput from '../../../components/form/BoxInput';
import {BitPayIdEffects} from '../../../store/bitpay-id';
import {Card} from '../../../store/card/card.models';
import {useAppDispatch, useAppSelector} from '../../../utils/hooks';
import AuthFormContainer, {
  AuthActionsContainer,
  AuthFormParagraph,
  AuthRowContainer,
} from '../../auth/components/AuthFormContainer';
import {CardActivationStackParamList} from '../CardActivationStack';

export type TwoFactorAuthScreenParamList = {
  card: Card;
};

interface TwoFactorAuthFieldValues {
  code: string;
}

const schema = yup.object().shape({
  code: yup.string().required('Required'),
});

const AuthenticationTwoFactorAuthScreen: React.FC<
  StackScreenProps<CardActivationStackParamList, 'TwoFactorAuth'>
> = ({navigation, route}) => {
  const dispatch = useAppDispatch();
  const verifyTwoFactorStatus = useAppSelector(
    ({BITPAY_ID}) => BITPAY_ID.verifyTwoFactorAuthStatus,
  );
  const verifyTwoFactorError =
    useAppSelector(({BITPAY_ID}) => BITPAY_ID.verifyTwoFactorAuthError) || '';
  const [buttonState, setButtonState] = useState<ButtonState>(null);

  const {
    control,
    handleSubmit,
    formState: {errors, isValid},
  } = useForm<TwoFactorAuthFieldValues>({
    resolver: yupResolver(schema),
    mode: 'onChange',
  });

  const onSubmit = handleSubmit(({code}) => {
    if (!code) {
      return;
    }

    setButtonState('loading');
    dispatch(BitPayIdEffects.startVerifyTwoFactor(code));
  });

  useEffect(() => {
    switch (verifyTwoFactorStatus) {
      case 'success':
        navigation.replace('Activate', {
          card: route.params.card,
        });
        return;

      case 'failed':
        // TODO
        console.log('Authentication with two factor failed');
        return;
    }
  }, [verifyTwoFactorStatus, navigation]);

  return (
    <AuthFormContainer>
      <AuthFormParagraph>
        Enter the code generated by your authenticator app.
      </AuthFormParagraph>

      <AuthRowContainer>
        <Controller
          control={control}
          render={({field: {onChange, onBlur, value}}) => (
            <BoxInput
              placeholder={'eg. 123456'}
              label={'Code'}
              onBlur={onBlur}
              onChangeText={onChange}
              error={errors.code?.message}
              value={value}
              keyboardType="numeric"
              onSubmitEditing={onSubmit}
            />
          )}
          name="code"
          defaultValue=""
        />
      </AuthRowContainer>

      <AuthActionsContainer>
        <Button onPress={onSubmit} disabled={!isValid} state={buttonState}>
          Submit
        </Button>
      </AuthActionsContainer>
    </AuthFormContainer>
  );
};

export default AuthenticationTwoFactorAuthScreen;
